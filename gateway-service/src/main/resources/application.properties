server:
  port: 8080

spring:
  application:
    name: gateway-service
  
  profiles:
    active: docker
  
  cloud:
    gateway:
      routes:
        # User Service Routes
        - id: user-service
          uri: ${USER_SERVICE_URL:http://user-service:8080}
          predicates:
            - Path=/api/user/**
          filters:
            - StripPrefix=0
            - name: CircuitBreaker
              args:
                name: user-service
                fallbackUri: forward:/fallback
        
        # Parcel Service Routes
        - id: parcel-service
          uri: ${PARCEL_SERVICE_URL:http://parcel-service:8080}
          predicates:
            - Path=/api/parcel/**
          filters:
            - StripPrefix=0
            - name: CircuitBreaker
              args:
                name: parcel-service
                fallbackUri: forward:/fallback
        
        # Tracking Service Routes
        - id: tracking-service
          uri: ${TRACKING_SERVICE_URL:http://tracking-service:8080}
          predicates:
            - Path=/api/tracking/**
          filters:
            - StripPrefix=0
            - name: CircuitBreaker
              args:
                name: tracking-service
                fallbackUri: forward:/fallback
        
        # Notification Service Routes
        - id: notification-service
          uri: ${NOTIFICATION_SERVICE_URL:http://notification-service:8080}
          predicates:
            - Path=/api/notification/**
          filters:
            - StripPrefix=0
            - name: CircuitBreaker
              args:
                name: notification-service
                fallbackUri: forward:/fallback
        
        # Location Service Routes
        - id: location-service
          uri: ${LOCATION_SERVICE_URL:http://location-service:8080}
          predicates:
            - Path=/api/location/**
          filters:
            - StripPrefix=0
            - name: CircuitBreaker
              args:
                name: location-service
                fallbackUri: forward:/fallback
        
        # Chatbot Service Routes (Python)
        - id: chatbot-service
          uri: ${CHATBOT_SERVICE_URL:http://chatbot-service:8080}
          predicates:
            - Path=/api/chatbot/**
          filters:
            - StripPrefix=0
            - name: CircuitBreaker
              args:
                name: chatbot-service
                fallbackUri: forward:/fallback
        
        # ETA Service Routes (Python)
        - id: eta-service
          uri: ${ETA_SERVICE_URL:http://eta-service:8080}
          predicates:
            - Path=/api/eta/**
          filters:
            - StripPrefix=0
            - name: CircuitBreaker
              args:
                name: eta-service
                fallbackUri: forward:/fallback
        
        # Admin routes
        - id: admin-routes
          uri: ${USER_SERVICE_URL:http://user-service:8080}
          predicates:
            - Path=/api/admin/**
          filters:
            - StripPrefix=0
            - name: CircuitBreaker
              args:
                name: admin-service
                fallbackUri: forward:/fallback
        
        # Manager routes
        - id: manager-routes
          uri: ${USER_SERVICE_URL:http://user-service:8080}
          predicates:
            - Path=/api/manager/**
          filters:
            - StripPrefix=0
            - name: CircuitBreaker
              args:
                name: manager-service
                fallbackUri: forward:/fallback
        
        # Driver routes
        - id: driver-routes
          uri: ${USER_SERVICE_URL:http://user-service:8080}
          predicates:
            - Path=/api/driver/**
          filters:
            - StripPrefix=0
            - name: CircuitBreaker
              args:
                name: driver-service
                fallbackUri: forward:/fallback
        
        # Public routes (no authentication required)
        - id: public-routes
          uri: ${USER_SERVICE_URL:http://user-service:8080}
          predicates:
            - Path=/api/public/**
          filters:
            - StripPrefix=0
      
      # Global CORS configuration
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOriginPatterns: "*"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
            allowedHeaders: "*"
            allowCredentials: true
            maxAge: 3600
      
      # Circuit breaker configuration
      default-filters:
        - name: Retry
          args:
            retries: 3
            statuses: BAD_GATEWAY,GATEWAY_TIMEOUT
            methods: GET,POST,PUT,DELETE
        - name: RequestRateLimiter
          args:
            redis-rate-limiter.replenishRate: 10
            redis-rate-limiter.burstCapacity: 20
            key-resolver: "#{@userKeyResolver}"

  # Security configuration for OAuth2 Resource Server
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${KEYCLOAK_AUTH_SERVER_URL:http://keycloak:8080}/realms/${KEYCLOAK_REALM:logistics-realm}
          jwk-set-uri: ${KEYCLOAK_AUTH_SERVER_URL:http://keycloak:8080}/realms/${KEYCLOAK_REALM:logistics-realm}/protocol/openid-connect/certs

  # Data sources
  data:
    mongodb:
      uri: ${MONGO_URI:mongodb://admin:admin123@mongo:27017/logistics_db?authSource=admin}
    
    redis:
      host: ${REDIS_HOST:redis}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:redis123}
      timeout: 2000ms
      database: 0

  # Kafka configuration
  kafka:
    bootstrap-servers: ${KAFKA_BROKER:kafka:29092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: gateway-service
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer

# Circuit Breaker Configuration
resilience4j:
  circuitbreaker:
    instances:
      user-service:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 10s
        permitted-number-of-calls-in-half-open-state: 3
      parcel-service:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 10s
      tracking-service:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 10s
      notification-service:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 10s
      location-service:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 10s
      chatbot-service:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 10s
      eta-service:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 10s

# Management and monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,gateway
  endpoint:
    health:
      show-details: always
    gateway:
      enabled: true

# Logging
logging:
  level:
    com.sparrow.gateway_service: DEBUG
    org.springframework.cloud.gateway: DEBUG
    org.springframework.security: DEBUG
    org.springframework.web: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"