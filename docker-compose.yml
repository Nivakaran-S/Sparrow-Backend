services:
  # ==== DATABASE SERVICES ====
  postgres:
    image: postgres:15
    container_name: postgres-db
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 30s
      timeout: 10s
      retries: 3

  mongo:
    image: mongo:7.0
    container_name: mongo-db
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: logistics_db
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==== REDIS ====
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    command: redis-server --requirepass redis123 --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis123", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==== KAFKA SERVICES ====
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-broker
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    ports:
      - "9092:9092"
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8090:8080"
    networks:
      - backend
    restart: unless-stopped

  # ==== KEYCLOAK ====
  keycloak:
    image: quay.io/keycloak/keycloak:22.0
    container_name: keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak_password
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8080
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_LOG_LEVEL: info
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command: start-dev
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

  # ==== SPRING BOOT SERVICES ====
  user-service:
    build: ./services/user-service
    container_name: user-service
    volumes:
      - ./config/kafka-config.yml:/app/config/kafka-config.yml
      - ./config/redis-config.yml:/app/config/redis-config.yml
    environment:
      SPRING_CONFIG_ADDITIONAL_LOCATION: file:/app/config/
      SPRING_PROFILES_ACTIVE: docker
      APP_NAME: user-service
      MONGO_URI: mongodb://admin:admin123@mongo:27017/logistics_db?authSource=admin
      KAFKA_BROKER: kafka:29092
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      KEYCLOAK_AUTH_SERVER_URL: http://keycloak:8080
      KEYCLOAK_REALM: logistics-realm
      KEYCLOAK_CLIENT_ID: logistics-backend
      KEYCLOAK_CLIENT_SECRET: logistics-secret-2024
    ports:
      - "8001:8080"
    depends_on:
      keycloak:
        condition: service_healthy
      mongo:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped

  parcel-service:
    build: ./services/parcel-service
    container_name: parcel-service
    volumes:
      - ./config/kafka-config.yml:/app/config/kafka-config.yml
      - ./config/redis-config.yml:/app/config/redis-config.yml
    environment:
      SPRING_CONFIG_ADDITIONAL_LOCATION: file:/app/config/
      SPRING_PROFILES_ACTIVE: docker
      APP_NAME: parcel-service
      MONGO_URI: mongodb://admin:admin123@mongo:27017/logistics_db?authSource=admin
      KAFKA_BROKER: kafka:29092
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      KEYCLOAK_AUTH_SERVER_URL: http://keycloak:8080
      KEYCLOAK_REALM: logistics-realm
      KEYCLOAK_CLIENT_ID: logistics-backend
      KEYCLOAK_CLIENT_SECRET: logistics-secret-2024
    ports:
      - "8003:8080"
    depends_on:
      keycloak:
        condition: service_healthy
      mongo:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped

  tracking-service:
    build: ./services/tracking-service
    container_name: tracking-service
    volumes:
      - ./config/kafka-config.yml:/app/config/kafka-config.yml
      - ./config/redis-config.yml:/app/config/redis-config.yml
    environment:
      SPRING_CONFIG_ADDITIONAL_LOCATION: file:/app/config/
      SPRING_PROFILES_ACTIVE: docker
      APP_NAME: tracking-service
      MONGO_URI: mongodb://admin:admin123@mongo:27017/logistics_db?authSource=admin
      KAFKA_BROKER: kafka:29092
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      KEYCLOAK_AUTH_SERVER_URL: http://keycloak:8080
      KEYCLOAK_REALM: logistics-realm
      KEYCLOAK_CLIENT_ID: logistics-backend
      KEYCLOAK_CLIENT_SECRET: logistics-secret-2024
    ports:
      - "8005:8080"
    depends_on:
      keycloak:
        condition: service_healthy
      mongo:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped

  notification-service:
    build: ./services/notification-service
    container_name: notification-service
    volumes:
      - ./config/kafka-config.yml:/app/config/kafka-config.yml
      - ./config/redis-config.yml:/app/config/redis-config.yml
    environment:
      SPRING_CONFIG_ADDITIONAL_LOCATION: file:/app/config/
      SPRING_PROFILES_ACTIVE: docker
      APP_NAME: notification-service
      MONGO_URI: mongodb://admin:admin123@mongo:27017/logistics_db?authSource=admin
      KAFKA_BROKER: kafka:29092
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      KEYCLOAK_AUTH_SERVER_URL: http://keycloak:8080
      KEYCLOAK_REALM: logistics-realm
      KEYCLOAK_CLIENT_ID: logistics-backend
      KEYCLOAK_CLIENT_SECRET: logistics-secret-2024
    ports:
      - "8006:8080"
    depends_on:
      keycloak:
        condition: service_healthy
      mongo:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped

  location-service:
    build: ./services/location-service
    container_name: location-service
    volumes:
      - ./config/kafka-config.yml:/app/config/kafka-config.yml
      - ./config/redis-config.yml:/app/config/redis-config.yml
    environment:
      SPRING_CONFIG_ADDITIONAL_LOCATION: file:/app/config/
      SPRING_PROFILES_ACTIVE: docker
      APP_NAME: location-service
      MONGO_URI: mongodb://admin:admin123@mongo:27017/logistics_db?authSource=admin
      KAFKA_BROKER: kafka:29092
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      KEYCLOAK_AUTH_SERVER_URL: http://keycloak:8080
      KEYCLOAK_REALM: logistics-realm
      KEYCLOAK_CLIENT_ID: logistics-backend
      KEYCLOAK_CLIENT_SECRET: logistics-secret-2024
    ports:
      - "8007:8080"
    depends_on:
      keycloak:
        condition: service_healthy
      mongo:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped

  # ==== PYTHON SERVICES ====
  chatbot-service:
    build: ./services/chatbot-service
    container_name: chatbot-service
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      KAFKA_BROKER: kafka:29092
      MONGO_URI: mongodb://admin:admin123@mongo:27017/logistics_db?authSource=admin
      KEYCLOAK_SERVER_URL: http://keycloak:8080
      KEYCLOAK_REALM: logistics-realm
      KEYCLOAK_CLIENT_ID: logistics-backend
      KEYCLOAK_CLIENT_SECRET: logistics-secret-2024
    ports:
      - "8002:8080"
    depends_on:
      keycloak:
        condition: service_healthy
      mongo:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped

  eta-service:
    build: ./services/eta-service
    container_name: eta-service
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      KAFKA_BROKER: kafka:29092
      MONGO_URI: mongodb://admin:admin123@mongo:27017/logistics_db?authSource=admin
      KEYCLOAK_SERVER_URL: http://keycloak:8080
      KEYCLOAK_REALM: logistics-realm
      KEYCLOAK_CLIENT_ID: logistics-backend
      KEYCLOAK_CLIENT_SECRET: logistics-secret-2024
    ports:
      - "8004:8080"
    depends_on:
      keycloak:
        condition: service_healthy
      mongo:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped

  # ==== API GATEWAY ====
  api-gateway:
    build: ./gateway-service  
    container_name: gateway-service
    volumes:
      - ./config/kafka-config.yml:/app/config/kafka-config.yml
      - ./config/redis-config.yml:/app/config/redis-config.yml
    environment:
      SPRING_CONFIG_ADDITIONAL_LOCATION: file:/app/config/
      SPRING_PROFILES_ACTIVE: docker
      APP_NAME: gateway-service
      USER_SERVICE_URL: http://user-service:8080
      PARCEL_SERVICE_URL: http://parcel-service:8080
      TRACKING_SERVICE_URL: http://tracking-service:8080
      NOTIFICATION_SERVICE_URL: http://notification-service:8080
      LOCATION_SERVICE_URL: http://location-service:8080
      CHATBOT_SERVICE_URL: http://chatbot-service:8080
      ETA_SERVICE_URL: http://eta-service:8080
      MONGO_URI: mongodb://admin:admin123@mongo:27017/logistics_db?authSource=admin
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      KAFKA_BROKER: kafka:29092
      KEYCLOAK_AUTH_SERVER_URL: http://keycloak:8080
      KEYCLOAK_REALM: logistics-realm
      KEYCLOAK_CLIENT_ID: logistics-backend
      KEYCLOAK_CLIENT_SECRET: logistics-secret-2024
    ports:
      - "8000:8080"
    depends_on:
      keycloak:
        condition: service_healthy
      mongo:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
  mongo_data:
  redis_data:
  kafka_data:
  zookeeper_data:
  zookeeper_logs:

networks:
  backend:
    driver: bridge